@model List<Document>

@{
    // Obtain the action name from the request query.
    string? sAction = this.Context.Request.Query["ActionName"];

    // Check if the action name is 'NewRequest'.
    if (sAction == "NewRequest")
        ViewData["Title"] = "New Request";

    // Check if the action name is 'EditRequest'.
    if (sAction == "EditRequest")
        ViewData["Title"] = "Edit Request";
}

@section Scripts {

    <script type="text/javascript">

        // Variable Declarations
        let documents = [];
        let documentCount = parseInt(document.getElementById("DocumentCount").value, 10);
        let selectedIndex = -1;
        let selectedIndex2 = -1;
        let deletedDocuments = [];
        let inProgress = false;

        function row_selected(index) {
            if (selectedIndex == index)
                selectedIndex = -1;
            else
                selectedIndex = index;

            // Display all the documents to the user.
            DisplayDocuments();

            if (selectedIndex2 != -1) {
                // Reset the row color.
                document.getElementById("_ROW-" + selectedIndex2).style.backgroundColor = EMPTY_STRING;
                selectedIndex2 = -1;
            }
        }

        function row_selected2(index) {
            if (selectedIndex2 != -1) { 
                // Reset the row color.
                document.getElementById("_ROW-" + selectedIndex2).style.backgroundColor = EMPTY_STRING;
            }

            if (selectedIndex2 == index)
                selectedIndex2 = -1;
            else { 
                selectedIndex2 = index;
                // Set the row color.
                document.getElementById("_ROW-" + selectedIndex2).style.backgroundColor = "rgba(255, 0, 0, 0.4)";
            }

            selectedIndex = -1;
            // Display all the documents to the user.
            DisplayDocuments();
        }

        function DisplayDocuments() {
            // Check if the collection 'documents' is greater than zero in length.
            if (documents.length > 0) {
                let html = "<table style='width: 100%'>";

                for (let i = 0; i < documents.length; i++) {
                    if (i == selectedIndex) {
                        html += "<tr style='background-color: rgba(255, 0, 0, 0.4);' onclick='row_selected(" + i + ")'><td style='width: 50%'>" + documents[i].name + "</td><td style='width: 25%'>" + getDocumentType(documents[i].name) + "</td><td style='width: 25%'>" + round_off_to_mb(documents[i].size) + "</td></tr>";
                    }
                    else {
                        html += "<tr onclick='row_selected(" + i + ")'><td style='width: 50%'>" + documents[i].name + "</td><td style='width: 25%'>" + getDocumentType(documents[i].name) + "</td><td style='width: 25%'>" + round_off_to_mb(documents[i].size) + "</td></tr>";
                    }
                }

                html += "</table>";
                document.getElementById("documentList2").innerHTML = html;
            }
            else {
                if (deletedDocuments == "DELETE_ALL") {
                    document.getElementById("documentList2").innerHTML = "<br /><b>No files uploaded</b><br /><br />";
                }
                else if(deletedDocuments.length == documentCount)
                    document.getElementById("documentList2").innerHTML = "<br /><b>No files uploaded</b><br /><br />";
            }
        }

        function UploadDocument() {
            // Create a file dialog element.
            let fileDialog = document.createElement("input");
            fileDialog.type = "file";
            fileDialog.multiple = true;
            // Perform a click operation on the element.
            fileDialog.click();

            fileDialog.onchange = function () {
                for (let i = 0; i < fileDialog.files.length; i++) {
                    if(fileDialog.files[i].size <= MAX_FILE_SIZE_LIMIT)
                        documents[documents.length] = fileDialog.files[i];
                }

                // Display all the documents to the user.
                DisplayDocuments();
            }
        }

        function DeleteDocument() {
            if (selectedIndex != -1) {
                let list = [];

                for (let i = 0; i < selectedIndex; i++) {
                    list[i] = documents[i];
                }

                for (let i = selectedIndex + 1; i < documents.length; i++) {
                    list[i - (selectedIndex + 1)] = documents[i];
                }

                documents = list;
                selectedIndex = -1;
                // Display all the documents to the user.
                DisplayDocuments();
            }
            else {
                if (selectedIndex2 != -1) {
                    // Delete the document.
                    let element = document.getElementById("_ROW-" + selectedIndex2);
                    deletedDocuments[deletedDocuments.length] = element.getAttribute("data-document");
                    element.remove();

                    // Remove the row from the table.
                    selectedIndex2 = -1;
                    DisplayDocuments();
                }
                else {
                    // Show notification dialog.
                    alert('No document selected.');
                }
            }
        }

        function DeleteAllDocuments() { 
            // Variable Declarations
            documents = [];
            deletedDocuments = "DELETE_ALL";

            selectedIndex = -1;
            selectedIndex2 = -1;

            let element = document.getElementById("existing-documents");

            if(element != null)
            {
                element.innerHTML = EMPTY_STRING;
            }

            // Display all the documents to the user.
            DisplayDocuments();
        }

        function SubmitRequest() {
            // Variable Declarations
            let requestFor = document.getElementById("txtRequestFor").value;
            let hoursWorked = document.getElementById("txtHoursWorked").value;
            let hourlyRate = document.getElementById("txtHourlyRate").value;
            let description = document.getElementById("txtDescription").value;

            // Validate the user input.
            let validation = requestFor.length > 0 &&
                hoursWorked.length > 0 &&
                hourlyRate.length > 0 &&
                description.length > 0;

            // Check if the validation process succeeded.
            if (validation) {
                // Show the loading screen if the webpage is taking long to respond.
                document.getElementById("main-screen").style.position = "absolute";
                document.getElementById("main-footer").style.position = "fixed";
                document.getElementById("loading-screen").style.top = ((window.innerHeight / 2) - (window.innerHeight / 4)) + window.scrollY + "px";
                document.getElementById("loading-screen").hidden = false;

                let SupportingDocuments = [];
                let documentsRead = 0;

                // Iterate through the 'documents' collection.
                for (let i = 0; i < documents.length; i++) {
                    SupportingDocuments[i] = new Object();
                    SupportingDocuments[i].Name = documents[i].name;
                    SupportingDocuments[i].Size = documents[i].size;

                    // Declare and instantiate a FileReader object.
                    let reader = new FileReader();
                    reader.readAsDataURL(documents[i]);

                    // Assign the 'onload' event.
                    reader.onloadend = function () {
                        SupportingDocuments[i].Content = reader.result.substring(reader.result.indexOf(",") + 1);
                        // Increase the count by one.
                        documentsRead++;
                    }
                }

                // Start a new interval that will check if the number of documents
                // read matches with the total number of documents.
                let interval = setInterval(function () {
                    if (documentsRead == documents.length) {     
                        let requestData = { "RequestFor": requestFor, "HoursWorked": hoursWorked, "HourlyRate": hourlyRate, "Description": description, "Documents": SupportingDocuments };
                        // Post data
                        POST_DATA2("/Request/NewRequest", JSON.stringify(requestData), [["ActionName", "NewRequest"]], RequestSubmitted);
                        // Clear the interval.
                        clearInterval(interval);
                    }
                }, 1000);
            }
            else {
                // Redirect the user to the Status page.
                window.location = "/Home/Status?ActionName=NewRequest&Status=Failed";
            }
        }

        function RequestSubmitted(status) {
            // Stop the interval.
            document.getElementById("main-screen").style.position = "relative";
            document.getElementById("main-footer").style.position = EMPTY_STRING;
            document.getElementById("loading-screen").hidden = true;
            
            if (status == 1) {
                // Redirect the user to UserAccount page.
                window.location = "/UserAccount/UserAccount";
            }

            if (status == 2) {
                // Redirect the user to the Status page.
                window.location = "/Home/Status?ActionName=NewRequest&Status=Failed";
            }
        }

        function UpdateRequest() {
            // Variable Declarations
            let requestFor = document.getElementById("txtRequestFor").value;
            let hoursWorked = document.getElementById("txtHoursWorked").value;
            let hourlyRate = document.getElementById("txtHourlyRate").value;
            let description = document.getElementById("txtDescription").value;

            // Perform data validation.
            let validation = requestFor.length > 0 &&
                hoursWorked.length > 0 &&
                hourlyRate.length > 0 &&
                description.length > 0;

            // Check if the validation process succeeded.
            if (validation) {
                // Show the loading screen if the webpage is taking long to respond.
                document.getElementById("main-screen").style.position = "absolute";
                document.getElementById("main-footer").style.position = "fixed";
                document.getElementById("loading-screen").style.top = ((window.innerHeight / 2) - (window.innerHeight / 4)) + window.scrollY + "px";
                document.getElementById("loading-screen").hidden = false;

                let SupportingDocuments = [];
                let documentsRead = 0;

                // Iterate through the collection.
                for (let i = 0; i < documents.length; i++) {
                    SupportingDocuments[i] = new Object();
                    SupportingDocuments[i].Name = documents[i].name;
                    SupportingDocuments[i].Size = documents[i].size;

                    // Declare and instantiate a FileReader object.
                    let reader = new FileReader();
                    reader.readAsDataURL(documents[i]);

                    // Assign the 'onload' event.
                    reader.onloadend = function () {
                        SupportingDocuments[i].Content = reader.result.substring(reader.result.indexOf(",") + 1);
                        documentsRead++;
                    }
                }

                // Start a new interval that will check if the number of documents
                // read matches with the total number of documents.
                let interval = setInterval(function () {
                    if (documentsRead == documents.length) {
                        let requestData = { "RequestFor": requestFor, "HoursWorked": hoursWorked, "HourlyRate": hourlyRate, "Description": description, "Documents": SupportingDocuments, "DeletedDocuments": deletedDocuments };
                        let requestID = document.getElementById("RequestID").value;

                        // Post data
                        POST_DATA2("/Request/NewRequest", JSON.stringify(requestData), [["ActionName", "EditRequest"], ["RequestID", requestID]], RequestUpdated);
                        // Clear the interval.
                        clearInterval(interval);
                    }
                }, 1000);
            }
            else {
                // Redirect the user to the Status page.
                window.location = "/Home/Status?ActionName=UpdateRequest&Status=Failed";
            }
        }

        function RequestUpdated(status) {
            document.getElementById("main-screen").style.position = "relative";
            document.getElementById("main-footer").style.position = EMPTY_STRING;
            document.getElementById("loading-screen").hidden = true;
            
            if (status == 1) { 
                // Redirect the user to the UserAccount page.
                window.location = "/UserAccount/UserAccount";
            }

            if (status == 2) {
                // Redirect the user to the Status page.
                window.location = "/Home/Status?ActionName=UpdateRequest&Status=Failed";
            }
        }

        function calculateFinalPayment()
        {
            let sHoursWorked = document.getElementById("txtHoursWorked").value;
            let sHourlyRate = document.getElementById("txtHourlyRate").value;

            let validation = sHoursWorked.length > 0 && sHourlyRate.length > 0 &&
                                IsNumeric(sHoursWorked) && IsNumeric(sHourlyRate);

            if (validation) {
                let hoursWorked = parseFloat(sHoursWorked);
                let hourlyRate = parseFloat(sHourlyRate);
                let finalPayment = hoursWorked * hourlyRate;

                document.getElementById("finalPayment").innerHTML = finalPayment.toFixed(2).toString();
            }
            else { 
                document.getElementById("finalPayment").innerHTML = "0.00";
            }
        }

    </script>
}

<input type="hidden" value="@Model?.Count" id="DocumentCount" />
<input type="hidden" value="@ViewData?["RequestID"]" id="RequestID" />

<div align="center">
    <br />
    <div style="width: 600px">
        <div style="background-color: rgb(35, 35, 35); background-image: radial-gradient(#2b5679, rgb(35, 35, 35)); border-radius: 16px">
            <br />
            @{
                // Check if the action name is 'NewRequest'.
                if (sAction == "NewRequest")
                {
                                                                <img src="~/images/new-icon-large.png" height="180" />
                }

                // Check if the action name is 'EditRequest'.
                if (sAction == "EditRequest")
                {
                                                                <img src="~/images/edit-icon-large.png" height="180" />
                }
            }
            <br />
            <br />
        </div>
        <div style="height: 2rem"></div>

        <h3 align="left">@ViewData?["Title"]</h3>
        <br />

        <div style="text-align: left">
            <b>Required fields are marked with an asterisk (*)</b>
        </div>
        <br />

        <table style="width: 600px" cellpadding="4">
            <tr>
                <th>Request/Claim for: <span class="red-asterisk">*</span></th>
                <td><input id="txtRequestFor" type="text" value="@ViewData["RequestFor"]" style="width: 300px" /></td>
            </tr>
            <tr>
                <th>Hours Worked: <span class="red-asterisk">*</span></th>
                <td><input id="txtHoursWorked" type="text" value="@ViewData["HoursWorked"]" style="width: 200px" onclick="calculateFinalPayment()" /></td>
            </tr>
            <tr>
                <th>Hourly Rate: <span class="red-asterisk">*</span></th>
                <td><input id="txtHourlyRate" type="text" value="@ViewData["HourlyRate"]" style="width: 200px" onclick="calculateFinalPayment()" /></td>
            </tr>
            <tr>
                <th>Final Payment:</th>
                <td>R <span id="finalPayment"></span></td>
            </tr>
        </table>

        <br />
        <p align="left"><b>Supporting Documents (Size Limit: 2 MB)</b></p>

        <div style="background-color: white">
            <table style="width: 600px">
                <tr style="background-color: rgb(220, 220, 220)">
                    <th style="width: 50%">FileName</th>
                    <th style="width: 25%">Type</th>
                    <th style="width: 25%">Size (MB)</th>
                </tr>
            </table>
            <div id="documentList" style="height: 150px; overflow-y: auto">
                <!-- Check if the method is 'GET' and the action name is 'EditRequest'. -->
                @if (this.Context.Request.Method == "GET" && this.Context.Request.Query["ActionName"] == "EditRequest")
                {
                    // Check if the count is greater than zero.
                    if (this.Model?.Count > 0)
                    {
                       
                        <table id="existing-documents" style="width: 100%">

                            <!-- Iterate through the collection. -->
                            @for (int i = 0; i < Model.Count; i++)
                            {
                                <tr id="_ROW-@i" data-document="@Model[i].DocumentID" onclick='row_selected2(@i)'><td style='width: 50%'>@Model[i].Name</td><td style='width: 25%'>@Model[i].Type</td><td style='width: 25%'>@Model[i].Size</td></tr>
                            }

                        </table>

                        <div id="documentList2"></div>
                    }
                    else
                    {
                        <div id="documentList2">
                            <br />
                            <b>No files uploaded.</b>
                            <br />
                            <br />
                        </div>
                    }
                }
                else
                {
                    <div id="documentList2">
                        <br />
                        <b>No files uploaded.</b>
                        <br />
                        <br />
                    </div>
                }
            </div>
        </div>

        <div align="left">
            <button class="button-class button-class-small2" onclick="UploadDocument()">Upload</button>
            <button class="button-class button-class-small2" onclick="DeleteDocument()">Delete</button>
            <button class="button-class button-class-small2" onclick="DeleteAllDocuments()">Delete All</button>
        </div>
        <br />
        <div align="left">
            <b>Additional Notes (Description) <span class="red-asterisk">*</span></b>
            <textarea id="txtDescription" style="width: 600px; height: 200px">@ViewData["Description"]</textarea>
        </div>
        <br />
        <div align="right">
            @{
                // Check if the action name is 'NewRequest'.
                if (sAction == "NewRequest")
                {
                                                                <button class="button-class button-class-small" onclick="SubmitRequest()">Submit</button>
                                                                <button class="button-class button-class-small" onclick="window.location = '/UserAccount/UserAccount'">Cancel</button>
                }

                // Check if the action name is 'EditRequest'.
                if (sAction == "EditRequest")
                {
                                                                <button class="button-class button-class-small" onclick="UpdateRequest()">Update</button>
                                                                <button class="button-class button-class-small" onclick="window.location = '/UserAccount/UserAccount'">Cancel</button>
                }
            }
        </div>
    </div>
</div>
